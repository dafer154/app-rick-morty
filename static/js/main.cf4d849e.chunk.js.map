{"version":3,"sources":["components/Header/Header.js","components/share/Character.js","actions/Service.js","components/share/WrapperCharacter.js","components/Home/Home.js","components/ListCharacters/ListCharacters.js","components/DetailCharacter/DetailCharacter.js","App.js","serviceWorker.js","index.js"],"names":["links","paddingRight","color","Header","react_default","a","createElement","Navbar","bg","expand","Brand","style","Toggle","aria-controls","Collapse","id","Nav","className","Link","to","Character","_Component","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","key","value","src","props","alt","name","pathname","concat","pkCharacter","Component","BASE_URL","WrapperCharacter","_this","call","state","characters","onSelectId","bind","assertThisInitialized","getCharacters","window","location","getThreeCharactersRandom","getAllCharacters","page","min","max","Math","floor","random","_this2","axios","all","get","getRandom","then","spread","res1","res2","res3","randomCharacters","push","data","setState","_this3","res","results","e","target","text","pathLocation","items","number","Pagination","Item","active","onClick","size","wrappNumbers","map","character","Character_Character","image","display","flexWrap","padding","justifyContent","Home","WrapperCharacter_WrapperCharacter","buttonLinkCharacters","background","borderRadius","fontWeight","ListCharacters","DetailCharacter","match","params","getDetails","detail","gender","species","App","components_Header_Header","Switch","Route","exact","path","component","Boolean","hostname","ReactDOM","render","BrowserRouter","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.cf4d849e.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Nav, Navbar } from \"react-bootstrap\";\r\n\r\nconst Header = () => (\r\n  <Navbar bg=\"light\" expand=\"lg\">\r\n    <Navbar.Brand style={links}>App Rick and Morty</Navbar.Brand>\r\n    <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n    <Navbar.Collapse id=\"basic-navbar-nav\">\r\n      <Nav className=\"mr-auto\">\r\n        <Link style={links} to=\"/\">\r\n          Home\r\n        </Link>\r\n        <Link style={links} to=\"/List-character\">\r\n          Personajes\r\n        </Link>\r\n      </Nav>\r\n    </Navbar.Collapse>\r\n  </Navbar>\r\n);\r\n\r\nconst links = {\r\n  paddingRight: \"10px\",\r\n  color: \"black\"\r\n};\r\n\r\nexport default Header;\r\n","import React, { Component } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport \"./styles/Character.css\";\r\nexport class Character extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"card cardResponsive\">\r\n        <img\r\n          src={this.props.src}\r\n          className=\"card-img-top\"\r\n          alt={this.props.name}\r\n        />\r\n        <div className=\"card-body\">\r\n          <h5 className=\"card-title\">{this.props.name}</h5>\r\n          <Link\r\n            className=\"buttonLink\"\r\n            to={{\r\n              pathname: `/character/${this.props.pkCharacter}`\r\n            }}\r\n          >\r\n            Detalle\r\n          </Link>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","export const BASE_URL = \"https://rickandmortyapi.com/api/character/\";\r\n\r\nexport default BASE_URL;\r\n","import React, { Component } from \"react\";\r\nimport { Character } from \"../share/Character\";\r\nimport axios from \"axios\";\r\nimport { Pagination } from \"react-bootstrap\";\r\nimport './styles/WrapperCharacter.css';\r\nimport {BASE_URL} from '../../actions/Service';\r\n\r\nexport class WrapperCharacter extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      characters: [],\r\n    };\r\n    this.onSelectId = this.onSelectId.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.getCharacters();\r\n  }\r\n\r\n  /**\r\n   * Nombre: getCharacters()\r\n   * Descripción: Método que evalua en que pagina se encuentra el usuario y \r\n   * asi mismo renderiza los personajes\r\n   * return Arreglo con personaje\r\n   */\r\n\r\n  getCharacters() {\r\n    const pathLocation = window.location.pathname;\r\n    if (pathLocation === \"/\") {\r\n      this.getThreeCharactersRandom();\r\n    } else {\r\n      this.getAllCharacters(this.state.page);\r\n    }\r\n  }\r\n\r\n   /**\r\n   * Nombre: getRandom()\r\n   * Descripción: Método que genera un número al azar entre los parámetros dados\r\n   * @Input min: valor del límite inferior\r\n   * @Input max: valor del límite superior\r\n   * return Número aleatorio entre min y máx\r\n   */\r\n\r\n  getRandom(min, max) {\r\n    return Math.floor(Math.random() * (max - min + 1)) + min;\r\n  }\r\n\r\n  /**\r\n   * Nombre: getThreeCharactersRandom()\r\n   * Descripción: Método que obtiene 3 personajes aleatorios para renderizar en la ruta '/'\r\n   * @Input min: valor del límite inferior\r\n   * @Input max: valor del límite superior\r\n   * return Arreglo con 3 personajes aleatorios\r\n   */\r\n  getThreeCharactersRandom() {\r\n    axios\r\n      .all([\r\n        axios.get(`${BASE_URL}${this.getRandom(1, 496)}`),\r\n        axios.get(`${BASE_URL}${this.getRandom(1, 496)}`),\r\n        axios.get(`${BASE_URL}${this.getRandom(1, 496)}`)\r\n      ])\r\n      .then(\r\n        axios.spread((res1, res2, res3) => {\r\n          const randomCharacters = [];\r\n          randomCharacters.push(res1.data);\r\n          randomCharacters.push(res2.data);\r\n          randomCharacters.push(res3.data);\r\n          return this.setState({\r\n            characters: randomCharacters\r\n          });\r\n        })\r\n      );\r\n  }\r\n\r\n    /**\r\n   * Nombre: getAllCharacters(page)\r\n   * Descripción: Método que obtiene los personajes por pagina para renderizar en la ruta '/personajes'\r\n   * @Input page: pagina a renderizar\r\n   * return Arreglo con personajes por pagina\r\n   */\r\n  getAllCharacters(page) {\r\n    axios.get(`${BASE_URL}?page=${page}`).then(res => {\r\n      return this.setState({\r\n        characters: res.data.results\r\n      });\r\n    });\r\n  }\r\n\r\n  \r\n  /**\r\n   * Nombre: onSelectId(page)\r\n   * Descripción: Método que obtiene el id del boton pagina\r\n   * @Input e: evento del boton\r\n   * return valor del boton---key\r\n   */\r\n\r\n  onSelectId(e) {\r\n    const page = e.target.text;\r\n    this.getAllCharacters(page);\r\n  }\r\n\r\n  render() {\r\n    //URL actual del usuario dentro de la app\r\n    const pathLocation = window.location.pathname;\r\n\r\n    //Creacion de botones para la paginacion\r\n    let active = 1;\r\n    let items = [];\r\n    for (let number = 1; number <= 25; number++) {\r\n      items.push(\r\n        <Pagination.Item\r\n          key={number}\r\n          active={number === active}\r\n          value={number}\r\n          onClick={this.onSelectId}\r\n        >\r\n          {number}\r\n        </Pagination.Item>\r\n      );\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        {pathLocation !== \"/\" ? (\r\n          <div>\r\n          <Pagination size=\"lg\" style={wrappNumbers}>\r\n            {items}\r\n          </Pagination>\r\n          <h1>Lista de personajes Rick and Morty</h1>\r\n          </div>\r\n        ) : (\r\n          false\r\n        )}\r\n        <div className=\"container wrapperCharacter\">\r\n          {this.state.characters.map(character => (\r\n            <Character\r\n              key={character.id}\r\n              pkCharacter={character.id}\r\n              src={character.image}\r\n              name={character.name}\r\n            />\r\n          ))}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst wrappNumbers = {\r\n  display: \"flex\",\r\n  flexWrap: \"wrap\",\r\n  padding: \"4%\",\r\n  justifyContent: \"center\"\r\n};\r\n","import React, { Component } from \"react\";\r\nimport { WrapperCharacter } from \"../share/WrapperCharacter\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nclass Home extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h1>Personajes de Rick and Morty</h1>\r\n        <WrapperCharacter />\r\n        <div>\r\n          <div style={{ padding: \"3%\" }}>\r\n            <Link\r\n              style={buttonLinkCharacters}\r\n              to={{\r\n                pathname: `/List-character`\r\n              }}\r\n            >\r\n              Ver todos\r\n            </Link>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst buttonLinkCharacters = {\r\n  background: \"rgb(40, 167, 69)\",\r\n  color: \"white\",\r\n  padding: \"1%\",\r\n  borderRadius: \"12px\",\r\n  fontWeight: \"bold\"\r\n};\r\n\r\nexport default Home;\r\n","import React, { Component } from \"react\";\r\nimport { WrapperCharacter } from \"../share/WrapperCharacter\";\r\n\r\nclass ListCharacters extends Component {\r\n  render() {\r\n    return <WrapperCharacter />;\r\n  }\r\n}\r\n\r\nexport default ListCharacters;\r\n","import React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\nimport \"./style/DetailCharacter.css\";\r\n\r\nexport class DetailCharacter extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      id: this.props.match.params.id,\r\n      character: {}\r\n    };\r\n  }\r\n\r\n  componentWillMount() {\r\n    if (this.state.id) {\r\n      this.getDetails();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Nombre: getDetails()\r\n   * Descripción: Método que obtiene el detalle de los personajes\r\n   * return Objeto con detalle del personaje\r\n   */\r\n\r\n  getDetails() {\r\n    const detail = `character/${this.state.id}`;\r\n    const BASE_URL = \"https://rickandmortyapi.com/api/\";\r\n    axios.get(`${BASE_URL}${detail}`).then(res => {\r\n      return this.setState({\r\n        character: res.data\r\n      });\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"container\" style={{ padding: \"2%\" }}>\r\n        <div className=\"cardDetail\">\r\n          <div className=\"wrappImage\">\r\n            <div className=\"wrapImage\">\r\n              <img\r\n                className=\"imageCharacter\"\r\n                src={this.state.character.image}\r\n                alt={this.state.character.name}\r\n              />\r\n            </div>\r\n\r\n            <div className=\"wrappText\">\r\n              <div>\r\n                <label>Genero: </label>{\" \"}\r\n                <span>{this.state.character.gender}</span>\r\n              </div>\r\n              <div>\r\n                <label>Especie: </label>{\" \"}\r\n                <span>{this.state.character.species}</span>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"wrappText\">\r\n            <h2>{this.state.character.name}</h2>\r\n            <p>\r\n              Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do\r\n              eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut\r\n              enim ad minim veniam, quis nostrud exercitation ullamco laboris\r\n              nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in\r\n              reprehenderit in voluptate velit esse cillum dolore eu fugiat\r\n              nulla pariatur. Excepteur sint occaecat cupidatat non proident,\r\n              sunt in culpa qui officia deserunt mollit anim id est laborum.\r\n            </p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default DetailCharacter;\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Header from \"./components/Header/Header\";\nimport { Route, Switch } from \"react-router-dom\";\nimport Home from \"./components/Home/Home\";\nimport ListCharacters from \"./components/ListCharacters/ListCharacters\";\nimport DetailCharacter from \"./components/DetailCharacter/DetailCharacter\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Header />\n        <Switch>\n          <Route exact path=\"/\" component={Home} />\n          <Route path=\"/List-character\" component={ListCharacters} />\n          <Route path=\"/character/:id\" component={DetailCharacter} />\n        </Switch>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport { BrowserRouter } from \"react-router-dom\";\n\n\nReactDOM.render(\n    <BrowserRouter >\n      <App />\n    </BrowserRouter>,\n    document.getElementById(\"root\")\n  );\n\nserviceWorker.unregister();\n"],"sourceRoot":""}